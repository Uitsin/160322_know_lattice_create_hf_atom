/* ----------------------------------------------------------------------
   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
   http://lammps.sandia.gov, Sandia National Laboratories
   Steve Plimpton, sjplimp@sandia.gov

   Copyright (2003) Sandia Corporation.  Under the terms of Contract
   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
   certain rights in this software.  This software is distributed under
   the GNU General Public License.

   See the README file in the top-level LAMMPS directory.
------------------------------------------------------------------------- */

#include "string.h"
#include "math.h"
#include "fix_injection_update.h"
#include "group.h"
#include "modify.h"
#include "error.h"
#include "atom.h"
#include "atom_vec.h"
#include "force.h"
#include "stdlib.h" 
#include "math.h" 
#include "mpi.h"
#include "comm.h"
#include "update.h"
#include "memory.h"
#include "neighbor.h"
#include "types.h"
#define TINY  1.e-3 ;
using namespace LAMMPS_NS;
using namespace FixConst;


/* ---------------------------------------------------------------------- */

FixInjectionUpdate::FixInjectionUpdate(LAMMPS *lmp, int narg, char **arg) :
  Fix(lmp, narg, arg)
{
  if (narg < 7) error->all(FLERR,"Illegal fix channel/update command"); // ID group-ID fixchannelini
  
  injection_x = atof(arg[3]);
  injection_y = atof(arg[4]);
  injection_z = atof(arg[5]);
  ini_channel_width = atof(arg[6]);
  injection_rate = atof(arg[7]);// bbl/min


  int check_injection_point;
  int check_x, check_y, check_z;
  check_injection_point = 0;
  
  check_x = (fmod(fabs(injection_x-0.5), 2.0) ==0); //and (flag_x == 1);
  check_y = (fmod(fabs(injection_y-0.5), 2.0) ==0); //and (flag_y == 1);
  check_z = (fmod(fabs(injection_z-0.5), 2.0) ==0); // and (flag_z == 1);
  if (check_x == 1 && check_y == 0 && check_z == 0){check_injection_point = 1;} 
  else if (check_x == 0 && check_y == 1 && check_z == 0){check_injection_point = 1;} 
  else if (check_x == 0 && check_y == 0 && check_z == 1){check_injection_point = 1;} 
  else{
    fprintf(screen, "!! Wrong!!!The injection position is Wrong !!!!, make sure (x%2)=0.5 or (y%2)=0.5 or (z%2)=0.5 ");
    error->one(FLERR,"!! Wrong!!!The injection position is Wrong !!!!, make sure (x%2)=0.5 or (y%2)=0.5 or (z%2)=0.5 ");
  }


  /*
  double H =30;//  meter
  injection_rate =  0.0088*(injection_rate/100.0)*(30.0/H); // m^3/sec
  */
  // one bbl/min = 1/377.39 m^3/s
  injection_rate =  1/377.39 *injection_rate; // m^3/sec
  

}

/*----------------------------------*/
FixInjectionUpdate::~FixInjectionUpdate()
{}


/*==========
  setmask
  ==========*/
int FixInjectionUpdate::setmask()
{
  int mask = 0;
   mask |= PRE_FORCE;
  return mask;
}


/*

void FixInjectionUpdate::init()
{
  // require an atom style with molecule IDs

  if (atom->molecule == NULL)
    error->all(FLERR,"Must use atom style with molecule IDs with fix bond/swap");

  // pair and bonds must be defined
  // no dihedral or improper potentials allowed
  // special bonds must be 0 1 1

  if (force->pair == NULL || force->bond == NULL)
    error->all(FLERR,"Fix bond/swap requires pair and bond styles");

  if (force->pair->single_enable == 0)
    error->all(FLERR,"Pair style does not support fix bond/swap");

  if (force->angle == NULL && atom->nangles > 0 && comm->me == 0)
    error->warning(FLERR,"Fix bond/swap will ignore defined angles");

  if (force->dihedral || force->improper)
    error->all(FLERR,"Fix bond/swap cannot use dihedral or improper styles");

  if (force->special_lj[1] != 0.0 || force->special_lj[2] != 1.0 ||
      force->special_lj[3] != 1.0)
    error->all(FLERR,"Fix bond/swap requires special_bonds = 0,1,1");

  // need a half neighbor list, built when ever re-neighboring occurs

  int irequest = neighbor->request((void *) this);
  neighbor->requests[irequest]->pair = 0;
  neighbor->requests[irequest]->fix = 1;
}

/*

void FixInjectionUpdate::init_list(int id, NeighList *ptr)
{
  list = ptr;
}
*/

/*============================
  called before force routine
  ============================*/
void FixInjectionUpdate::pre_force(int vflag)
//  void FixInjectionUpdate::final_integrate()
{
  comm->forward_comm();
  injection_process();// injection water at injection position
  comm->forward_comm();
  //  channel_update();
  //  comm->forward_comm();
  /*

  int n;
  int nlocal = atom->nlocal;
  int *tag=atom->tag;
  int *num_bond=atom->num_bond;
  int **bond_atom=atom->bond_atom;
  double **x0=atom->x0;
  int *atype = atom->type;
  for (n =0; n<nlocal; n++){
    //    if (tag[n]==79) fprintf(screen, "===x,y,z %.2f %.2f %.2f and num_bond %d atype %d\n",x0[n][0],x0[n][1],x0[n][2],num_bond[n],atype[n]);
    if (tag[n]==56) fprintf(screen, "=====x,y,z %.2f %.2f %.2f and num_bond %d atype %d, bond_atom1 atom2 atom3 atom4 atom5 %d %d %d %d %d\n",x0[n][0],x0[n][1],x0[n][2],num_bond[n],atype[n],bond_atom[n][0],bond_atom[n][1],bond_atom[n][2],bond_atom[n][3],bond_atom[n][4]);
  }
  */


}



/*=================================================
  update new channel atom position after injection
  =================================================*/
void FixInjectionUpdate:: injection_process()
{
  int *atype = atom->type;
  int channel_atomi;
  double channelx,channely,channelz;
  int n;
  int nlocal = atom->nlocal;
  double **x0 = atom->x0;
  double *channel_width = atom->channel_width;
  int nstep = update->ntimestep;
  double dw;
  //  fprintf(screen, "injection process\n");
  for (n=0; n<nlocal;n++){
    if (atype[n] != CONNECTED_CHANNEL_ATOM_TYPE) continue;
    channel_atomi = n;
    channelx = x0[channel_atomi][0];
    channely = x0[channel_atomi][1];
    channelz = x0[channel_atomi][2];
    if ((fabs(channelx - injection_x) > 1.e-8 ) || ( fabs(channely-injection_y)>1.e-8 ) ||  ( fabs(channelz-injection_z)>1.e-8 )) continue;// not injection position  

    dw = injection_rate*update->dt;
    //    if ((update->ntimestep % 1000 )==0) fprintf(screen, "injection process: timestep %d, delta_w= %f (microns)  at x y z %f %f %f\n ",nstep,dw*1000000,x0[channel_atomi][0],x0[channel_atomi][1],x0[channel_atomi][2] );
    //    channel_width[channel_atomi] += injection_rate*update->dt;
    channel_width[channel_atomi] += dw;
    if ((update->ntimestep % 10000 )==0) fprintf(screen, "injection process: timestep %d, delta_w = %f (microns),channel_width %f (mm),  at x y z %f %f %f\n ",nstep,dw*1000000,channel_width[channel_atomi]*1000,x0[channel_atomi][0],x0[channel_atomi][1],x0[channel_atomi][2] );
  }
}





/*========================================
  channel atom update based on new channel width
  ========================================*/
void FixInjectionUpdate::channel_update(){

  int n;
  int nbondlist = neighbor->nbondlist;
  int **bondlist = neighbor->bondlist;
  int rock_atom1, rock_atom2,channel_atom;
  int btype;
  int *atype = atom->type;
  double  *channel_width = atom->channel_width;
  double channel_w;
  double delta_x, delta_y, delta_z, delta_mag;
  double **x0 = atom->x0;
  double **x = atom->x;
  int newton_bond = force->newton_bond;
  int nlocal = atom->nlocal;

  for (n = 0; n < nbondlist; n++) {
    rock_atom1 = bondlist[n][0];
    rock_atom2 = bondlist[n][1];
    btype = bondlist[n][2];
    if (btype != WET_CHANNEL_BOND_TYPE ) continue;// this is not a wet channel
    
    channel_atom = find_channel_atom(rock_atom1, rock_atom2);

    if (atype[channel_atom] != CONNECTED_CHANNEL_ATOM_TYPE ) continue;// this is not a wet channel

    channel_w = channel_width[channel_atom];

    delta_x = x0[rock_atom1][0] - x0[rock_atom2][0];
    delta_y = x0[rock_atom1][1] - x0[rock_atom2][1];
    delta_z = x0[rock_atom1][2] - x0[rock_atom2][2];
    delta_mag = sqrt (delta_x *delta_x + delta_y *delta_y +delta_z *delta_z);
    
   
    if (newton_bond || rock_atom1 <nlocal){
      if (fabs(delta_x)  == delta_mag) {
	x[rock_atom1][0] = x[channel_atom][0] +0.5*(1+channel_w) * delta_x/delta_mag;
      }
      if (fabs(delta_y)  == delta_mag) {
	x[rock_atom1][1] = x[channel_atom][1] +0.5*(1+channel_w) * delta_y/delta_mag;
      }
      if (fabs(delta_z)  == delta_mag) {
	x[rock_atom1][2] = x[channel_atom][2] +0.5*(1+channel_w) * delta_z/delta_mag;
      }

    }
    if (newton_bond || rock_atom2 <nlocal){
      if (fabs(delta_x)  == delta_mag) {
	x[rock_atom2][0] = x[channel_atom][0] -0.5*(1+channel_w) * delta_x/delta_mag;
      }
      if (fabs(delta_y)  == delta_mag) {
	x[rock_atom2][1] = x[channel_atom][1] -0.5*(1+channel_w) * delta_y/delta_mag;
      }
      if (fabs(delta_z)  == delta_mag) {
	x[rock_atom2][2] = x[channel_atom][2] -0.5*(1+channel_w) * delta_z/delta_mag;
      }
    }
  }
}




/*====================================================
  find channel_atom between rock_atom1, and rock_atom2
  ====================================================*/

int FixInjectionUpdate::find_channel_atom(int rock_atom1, int rock_atom2){
  
  int ii,jj;
  int return_channel_atom;
  double channelx,channely,channelz;
  double **x0 = atom->x0;
  int *num_bond_rock_channel_atom = atom->num_bond_rock_channel_atom;
  int **bond_rock_channel_atom = atom-> bond_rock_channel_atom;
  int *num_bond_channel_atom = atom->num_bond_channel_atom;
  int channel_atom;
  
  
  return_channel_atom = -991;
  for (ii = 0; ii<num_bond_rock_channel_atom[rock_atom1]; ii++){
    
    channelx = 0.5* ( x0[rock_atom1][0] + x0[rock_atom2][0]);
    channely = 0.5* ( x0[rock_atom1][1] + x0[rock_atom2][1]);
    channelz = 0.5* ( x0[rock_atom1][2] + x0[rock_atom2][2]);
    channel_atom = atom->map(bond_rock_channel_atom[rock_atom1][ii]);
    if ( (fabs(x0[channel_atom][0] - channelx) <1.e-6) &&  (fabs(x0[channel_atom][1] - channely) <1.e-6) && (fabs(x0[channel_atom][2] - channelz)<1.e-6 ) ){ 
      return_channel_atom = channel_atom;
    }
  }
  return return_channel_atom;
}


